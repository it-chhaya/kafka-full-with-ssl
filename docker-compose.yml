services:

  kafka-1:
    image: confluentinc/cp-kafka:7.8.0
    container_name: kafka-1
    ports:
      - 29093:9093
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'SSL:SSL,CONTROLLER:PLAINTEXT,SSL-INTERNAL:SSL'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka-1:29092,2@kafka-2:29092,3@kafka-3:29092'
      KAFKA_LISTENERS: 'SSL-INTERNAL://:19093,CONTROLLER://kafka-1:29092,SSL://:9093'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'SSL-INTERNAL'
      KAFKA_SECURITY_PROTOCOL: SSL
      KAFKA_ADVERTISED_LISTENERS: SSL-INTERNAL://kafka-1:19093,SSL://localhost:29093
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      CLUSTER_ID: '4L6g3nShT-eMCtK--X86sw'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      # SSL Configuration
      KAFKA_SSL_KEYSTORE_FILENAME: 'kafka.server.keystore.jks'
      KAFKA_SSL_KEYSTORE_CREDENTIALS: 'kafka_keystore_creds'
      KAFKA_SSL_KEY_CREDENTIALS: 'kafka_ssl_key_creds'
      KAFKA_SSL_TRUSTSTORE_FILENAME: 'kafka.server.truststore.jks'
      KAFKA_SSL_TRUSTSTORE_CREDENTIALS: 'kafka_truststore_creds'
      KAFKA_SSL_CLIENT_AUTH: 'required'
      KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: ""
    volumes:
      - ./secrets:/etc/kafka/secrets
      - ./config:/etc/kafka/config
    networks:
      - kafka-fullstack

  kafka-2:
    image: confluentinc/cp-kafka:7.8.0
    container_name: kafka-2
    ports:
      - 39093:9093
    environment:
      KAFKA_NODE_ID: 2
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'SSL:SSL,CONTROLLER:PLAINTEXT,SSL-INTERNAL:SSL'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka-1:29092,2@kafka-2:29092,3@kafka-3:29092'
      KAFKA_LISTENERS: 'SSL-INTERNAL://:19093,CONTROLLER://kafka-2:29092,SSL://:9093'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'SSL-INTERNAL'
      KAFKA_SECURITY_PROTOCOL: SSL
      KAFKA_ADVERTISED_LISTENERS: SSL-INTERNAL://kafka-2:19093,SSL://localhost:39093
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      CLUSTER_ID: '4L6g3nShT-eMCtK--X86sw'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      # SSL Configuration
      KAFKA_SSL_KEYSTORE_FILENAME: 'kafka.server.keystore.jks'
      KAFKA_SSL_KEYSTORE_CREDENTIALS: 'kafka_keystore_creds'
      KAFKA_SSL_KEY_CREDENTIALS: 'kafka_ssl_key_creds'
      KAFKA_SSL_TRUSTSTORE_FILENAME: 'kafka.server.truststore.jks'
      KAFKA_SSL_TRUSTSTORE_CREDENTIALS: 'kafka_truststore_creds'
      KAFKA_SSL_CLIENT_AUTH: 'required'
      KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: ""
    volumes:
      - ./secrets:/etc/kafka/secrets
      - ./config:/etc/kafka/config
    networks:
      - kafka-fullstack

  kafka-3:
    image: confluentinc/cp-kafka:7.8.0
    container_name: kafka-3
    ports:
      - 49093:9093
    environment:
      KAFKA_NODE_ID: 3
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'SSL:SSL,CONTROLLER:PLAINTEXT,SSL-INTERNAL:SSL'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka-1:29092,2@kafka-2:29092,3@kafka-3:29092'
      KAFKA_LISTENERS: 'SSL-INTERNAL://:19093,CONTROLLER://kafka-3:29092,SSL://:9093'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'SSL-INTERNAL'
      KAFKA_SECURITY_PROTOCOL: SSL
      KAFKA_ADVERTISED_LISTENERS: SSL-INTERNAL://kafka-3:19093,SSL://localhost:49093
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      CLUSTER_ID: '4L6g3nShT-eMCtK--X86sw'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      # SSL Configuration
      KAFKA_SSL_KEYSTORE_FILENAME: 'kafka.server.keystore.jks'
      KAFKA_SSL_KEYSTORE_CREDENTIALS: 'kafka_keystore_creds'
      KAFKA_SSL_KEY_CREDENTIALS: 'kafka_ssl_key_creds'
      KAFKA_SSL_TRUSTSTORE_FILENAME: 'kafka.server.truststore.jks'
      KAFKA_SSL_TRUSTSTORE_CREDENTIALS: 'kafka_truststore_creds'
      KAFKA_SSL_CLIENT_AUTH: 'required'
      KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: ""
    volumes:
      - ./secrets:/etc/kafka/secrets
      - ./config:/etc/kafka/config
    networks:
      - kafka-fullstack

  schema-registry:
    image: confluentinc/cp-schema-registry:7.8.0
    container_name: schema-registry
    ports: 
      - 8081:8081
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
    environment:
      # Basic Schema Registry Configuration
      # Sets the hostname as 'schema-registry'
      # Configures Schema Registry to listen on port 8081
      # Note: It's using HTTP for client connections despite SSL configuration (might want to change to HTTPS)
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_DEBUG: "true"
      SCHEMA_REGISTRY_KAFKASTORE_TOPIC: _schemas
      SCHEMA_REGISTRY_KAFKASTORE_TOPIC_REPLICATION_FACTOR: 3
      # Kafka Store Connection (Schema Registry to Kafka)
      # Connects to all three Kafka brokers using SSL (port 19093)
      # Uses SSL for secure communication with Kafka
      # Specifies truststore and keystore for Kafka connection
      # These certificates are used to authenticate with Kafka brokers
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "kafka-1:19093,kafka-2:19093,kafka-3:19093"
      SCHEMA_REGISTRY_KAFKASTORE_SECURITY_PROTOCOL: SSL
      SCHEMA_REGISTRY_KAFKASTORE_SSL_TRUSTSTORE_LOCATION: /etc/kafka/secrets/kafka.server.truststore.jks
      SCHEMA_REGISTRY_KAFKASTORE_SSL_TRUSTSTORE_PASSWORD: password123
      SCHEMA_REGISTRY_KAFKASTORE_SSL_KEYSTORE_LOCATION: /etc/kafka/secrets/kafka.server.keystore.jks
      SCHEMA_REGISTRY_KAFKASTORE_SSL_KEYSTORE_PASSWORD: password123
      SCHEMA_REGISTRY_KAFKASTORE_SSL_KEY_PASSWORD: password123
      # Schema Registry REST API SSL Configuration
      # Enables two-way SSL authentication for clients
      # Uses the same certificates as Kafka connection (which is not a best practice)
      # Client authentication is required (SSL_CLIENT_AUTH: 'true')
      # SCHEMA_REGISTRY_SSL_CLIENT_AUTH: 'true'
      # SCHEMA_REGISTRY_SSL_TRUSTSTORE_LOCATION: /etc/kafka/secrets/kafka.server.truststore.jks
      # SCHEMA_REGISTRY_SSL_TRUSTSTORE_PASSWORD: password123
      # SCHEMA_REGISTRY_SSL_KEYSTORE_LOCATION: /etc/kafka/secrets/kafka.server.keystore.jks
      # SCHEMA_REGISTRY_SSL_KEYSTORE_PASSWORD: password123
      # SCHEMA_REGISTRY_SSL_KEY_PASSWORD: password123
    volumes:
      - ./secrets:/etc/kafka/secrets
      - ./config:/etc/kafka/config
    networks:
      - kafka-fullstack

  debezium-kafka-connect:
    build: .
    image: debezium-kafka-connect
    container_name: debezium-kafka-connect
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
      - schema-registry
    ports:
      - 8083:8083
    environment:

      # Base Configuration
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: cdc_connect-group
      CONNECT_REST_ADVERTISED_HOST_NAME: "debezium-kafka-connect"

      # Storage Topics Configuration
      CONFIG_STORAGE_TOPIC: cdc_connect_configs
      OFFSET_STORAGE_TOPIC: cdc_connect_offsets
      STATUS_STORAGE_TOPIC: cdc_connect_status
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: '3'
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: '3'
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: '3'
      
      # Schema Registry Integration:
      KEY_CONVERTER: io.confluent.connect.avro.AvroConverter #### add when add avro schema registry
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081 #### add when add avro schema registry
      VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter #### add when add avro schema registry
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081 #### add when add avro schema registry
      # KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      # VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      # CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      # CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081

      # SSL Configuration
      # Kafka cluster connection
      BOOTSTRAP_SERVERS: "kafka-1:19093,kafka-2:19093,kafka-3:19093"

      # SSL for Kafka connection for all clusters | producer | consumer
      CONNECT_SECURITY_PROTOCOL: "SSL"
      CONNECT_PRODUCER_SECURITY_PROTOCOL: "SSL"
      CONNECT_CONSUMER_SECURITY_PROTOCOL: "SSL"

      # Cluster Truststore and Keystore
      CONNECT_SSL_TRUSTSTORE_LOCATION: /etc/kafka/secrets/kafka.server.truststore.jks
      CONNECT_SSL_TRUSTSTORE_PASSWORD: password123
      CONNECT_SSL_KEYSTORE_LOCATION: /etc/kafka/secrets/kafka.server.keystore.jks
      CONNECT_SSL_KEYSTORE_PASSWORD: password123
      CONNECT_SSL_KEY_PASSWORD: password123

      # Producer Truststore and Keystore
      CONNECT_PRODUCER_SSL_TRUSTSTORE_LOCATION: /etc/kafka/secrets/kafka.server.truststore.jks
      CONNECT_PRODUCER_SSL_TRUSTSTORE_PASSWORD: password123
      CONNECT_PRODUCER_SSL_KEYSTORE_LOCATION: /etc/kafka/secrets/kafka.server.keystore.jks
      CONNECT_PRODUCER_SSL_KEYSTORE_PASSWORD: password123
      CONNECT_PRODUCER_SSL_KEY_PASSWORD: password123

      # Consumer Truststore and Keystore
      CONNECT_CONSUMER_SSL_TRUSTSTORE_LOCATION: /etc/kafka/secrets/kafka.server.truststore.jks
      CONNECT_CONSUMER_SSL_TRUSTSTORE_PASSWORD: password123
      CONNECT_CONSUMER_SSL_KEYSTORE_LOCATION: /etc/kafka/secrets/kafka.server.keystore.jks
      CONNECT_CONSUMER_SSL_KEYSTORE_PASSWORD: password123
      CONNECT_CONSUMER_SSL_KEY_PASSWORD: password123

      # Disable hostname verification if needed
      CONNECT_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: ""
      CONNECT_PRODUCER_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: ""
      CONNECT_CONSUMER_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: ""

      # SSL for Schema Registry connection
      # KEY_CONVERTER_SCHEMA_REGISTRY_SSL_TRUSTSTORE_LOCATION: /etc/kafka/secrets/kafka.server.truststore.jks
      # KEY_CONVERTER_SCHEMA_REGISTRY_SSL_TRUSTSTORE_PASSWORD: password123
      # KEY_CONVERTER_SCHEMA_REGISTRY_SSL_KEYSTORE_LOCATION: /etc/kafka/secrets/kafka.server.keystore.jks
      # KEY_CONVERTER_SCHEMA_REGISTRY_SSL_KEYSTORE_PASSWORD: password123
      # VALUE_CONVERTER_SCHEMA_REGISTRY_SSL_TRUSTSTORE_LOCATION: /etc/kafka/secrets/kafka.server.truststore.jks
      # VALUE_CONVERTER_SCHEMA_REGISTRY_SSL_TRUSTSTORE_PASSWORD: password123
      # VALUE_CONVERTER_SCHEMA_REGISTRY_SSL_KEYSTORE_LOCATION: /etc/kafka/secrets/kafka.server.keystore.jks
      # VALUE_CONVERTER_SCHEMA_REGISTRY_SSL_KEYSTORE_PASSWORD: password123
      
    volumes:
      - ./secrets:/etc/kafka/secrets
      - ./config:/etc/kafka/config
      - ./volumes/data:/data
      - ./csv-data/:/csv-data/
    networks:
      - kafka-fullstack

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "18000:8080"
    environment:
      # Basic Auth for UI (optional but recommended)
      AUTH_TYPE: "LOGIN_FORM"
      SPRING_SECURITY_USER_NAME: admin
      SPRING_SECURITY_USER_PASSWORD: admin-secret
      # Kafka Cluster Configuration
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka-1:19093,kafka-2:19093,kafka-3:19093
      KAFKA_CLUSTERS_0_PROPERTIES_SECURITY_PROTOCOL: SSL
      KAFKA_CLUSTERS_0_PROPERTIES_SSL_TRUSTSTORE_LOCATION: /etc/kafka/secrets/kafka.server.truststore.jks
      KAFKA_CLUSTERS_0_PROPERTIES_SSL_TRUSTSTORE_PASSWORD: password123
      KAFKA_CLUSTERS_0_PROPERTIES_SSL_KEYSTORE_LOCATION: /etc/kafka/secrets/kafka.server.keystore.jks
      KAFKA_CLUSTERS_0_PROPERTIES_SSL_KEYSTORE_PASSWORD: password123
      KAFKA_CLUSTERS_0_PROPERTIES_SSL_KEY_PASSWORD: password123
      # Schema Registry Configuration
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schema-registry:8081
      # KAFKA_CLUSTERS_0_SCHEMAREGISTRYSSL_TRUSTSTORELOCATION: /etc/kafka/secrets/kafka.server.truststore.jks
      # KAFKA_CLUSTERS_0_SCHEMAREGISTRYSSL_TRUSTSTOREPASSWORD: password123
      # KAFKA_CLUSTERS_0_SCHEMAREGISTRYSSL_KEYSTORELOCATION: /etc/kafka/secrets/kafka.server.keystore.jks
      # KAFKA_CLUSTERS_0_SCHEMAREGISTRYSSL_KEYSTOREPASSWORD: password123
      # KAFKA_CLUSTERS_0_PROPERTIES_SCHEMA_REGISTRY_SSL_TRUSTSTORE_LOCATION: /etc/kafka/secrets/kafka.server.truststore.jks
      # KAFKA_CLUSTERS_0_PROPERTIES_SCHEMA_REGISTRY_SSL_TRUSTSTORE_PASSWORD: password123
      # KAFKA_CLUSTERS_0_PROPERTIES_SCHEMA_REGISTRY_SSL_KEYSTORE_LOCATION: /etc/kafka/secrets/kafka.server.keystore.jks
      # KAFKA_CLUSTERS_0_PROPERTIES_SCHEMA_REGISTRY_SSL_KEYSTORE_PASSWORD: password123
      # KAFKA_CLUSTERS_0_PROPERTIES_SCHEMA_REGISTRY_SSL_KEY_PASSWORD: password123
      # Kafka Connect Configuration
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME: debezium-kafka-connect
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS: http://debezium-kafka-connect:8083
    volumes:
      - ./secrets:/etc/kafka/secrets
      - ./config:/etc/kafka/config
      - kafka-ui-data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:18000/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
      - schema-registry
      - debezium-kafka-connect
    # Resource limits for stability
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    networks:
      - kafka-fullstack

  # elasticsearch:
  #   image: elasticsearch:8.12.0
  #   container_name: elasticsearch
  #   environment:
  #     - discovery.type=single-node
  #     - xpack.security.enabled=false
  #     - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
  #     - path.data=/usr/share/elasticsearch/external/data
  #     - path.logs=/usr/share/elasticsearch/external/logs
  #   ports:
  #     - "9200:9200"
  #   volumes:
  #     - elastic-data:/usr/share/elasticsearch/external/data
  #     - elastic-logs:/usr/share/elasticsearch/external/logs
  #     - ${PWD}/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
  #   healthcheck:
  #     test: ["CMD-SHELL", "curl -s http://localhost:9200/_cluster/health | grep -q 'status.*green\\|status.*yellow'"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 3
  #   networks:
  #     - kafka-fullstack

  # kibana:
  #   image: kibana:8.12.0
  #   container_name: kibana
  #   ports:
  #     - "5601:5601"
  #   environment:
  #     - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
  #   volumes:
  #     - ${PWD}/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml
  #   depends_on:
  #     elasticsearch:
  #       condition: service_healthy
  #   networks:
  #     - kafka-fullstack

volumes:
  kafka-ui-data:
  # elastic-data:
  #   external: true
  #   name: elastic_data_prod
  # elastic-logs:
  #   external: true
  #   name: elastic_logs_prod

networks:
  kafka-fullstack:
    external: true
    name: kakfa-fullstack